% Copyright (c) 2015, Christopher Mark Gore,
% Soli Deo Gloria,
% All rights reserved.
%
% 2317 South River Road, Saint Charles, Missouri 63303 USA.
% Web: http://cgore.com
% Email: cgore@cgore.com
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
%
%     * Redistributions of source code must retain the above copyright
%       notice, this list of conditions and the following disclaimer.
%
%     * Redistributions in binary form must reproduce the above copyright
%       notice, this list of conditions and the following disclaimer in the
%       documentation and/or other materials provided with the distribution.
%
%     * Neither the name of Christopher Mark Gore nor the names of other
%       contributors may be used to endorse or promote products derived from
%       this software without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
% POSSIBILITY OF SUCH DAMAGE.

\documentclass{seminar}

\usepackage{fixltx2e} % Bugfixes for LaTeX 2e
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage[normalem]{ulem}
\usepackage{graphicx}
\usepackage[usenames,dvipsnames]{xcolor}
\usepackage{librebaskerville} % Baskerville font
\usepackage{amsfonts}
\usepackage{listings}
\usepackage[dvips]{pstricks}
\usepackage{relsize}
\usepackage{textcomp}
\usepackage[normalem]{ulem}
\usepackage{wasysym}
\usepackage{dirtree}
\usepackage{float}
\usepackage{wrapfig}
\usepackage{pifont}
\usepackage{tikz}

\usetikzlibrary{positioning,shapes,shadows,arrows}

\usepackage{semcolor,slidesec}
\input{seminar.bug}
\input{seminar.bg2}
% \input{seminar.bg3} % TODO: why is this missing on OSX?

\definecolor{fillcolor}{rgb}{0.9,0.95,1.0}
\definecolor{linecolor}{rgb}{0.8,0.85,0.9}
\slideframe[\psset{fillcolor=fillcolor,linecolor=linecolor}]{scshadow}

\newcommand{\hc}{Blue}
\newcommand{\h}[1]{\slideheading{\textcolor{\hc}{#1}}}
\newcommand{\tq}[1]{\textcolor{Green}{\textbf{#1}}}
\newcommand{\tbd}[1]{\textcolor{Blue}{\textit{#1}}}
\newcommand{\TODO}{{\Huge \textcolor{Red}{\textbf{{TO DO}}}}}

\definecolor{commentcolor}{rgb}{0.1,0.1,0.8}
\definecolor{identifiercolor}{rgb}{0.3,0.3,0.3}
\definecolor{keywordcolor}{rgb}{0.1,0.5,0.1}
\definecolor{cexcolor}{rgb}{0.25,0.25,0.4}
\lstset{
  basicstyle=\footnotesize\ttfamily,
  language=Ruby,
  morekeywords={make-instance},
  escapeinside={\%*}{*)},
  commentstyle=\itshape\color{commentcolor},
  identifierstyle=\color{identifiercolor},
  keywordstyle=\color{keywordcolor},
  upquote=true,
  numbers=left,
  numberstyle=\tiny\color{commentcolor},
  numbersep=5pt
}
\newcommand{\cex}[1]{\textcolor{cexcolor}{\textit{#1}}}

\newcommand{\shell}[1]{\texttt{\textbf{{\textcolor{Blue} \$}} #1}}

\newcommand{\xmark}{\textcolor{Red}{\ding{55}}}
\newcommand{\cmark}{\textcolor{Green}{\ding{51}}}

\newcommand{\SlideSection}[1]
{
  \begin{center}
    \textcolor{\hc}{\textbf{\emph{\Huge{#1}}}}
  \end{center}
}


\newcommand{\fullSlideImage}[1]{
  \begin{center}
    \includegraphics[width=4in,height=2.5in,keepaspectratio=true]{#1}
  \end{center}
}

\newcommand{\halfSlideImage}[1]{
  \includegraphics[width=2in,height=2.5in,keepaspectratio=true]{#1}
}

\newcommand{\rightSideImageName}{you-must-supply-the-image-name.eps}
\newenvironment{rightSideImage}[1]
{
  \renewcommand{\rightSideImageName}{#1}
  \begin{tabular}{lr}
    \begin{minipage}[b]{2in}
}
{
    \end{minipage}
    &
    \halfSlideImage{\rightSideImageName}
  \end{tabular}
}

\title{\psshadowbox{Eigenclasses, Singletons, What?}}
\author{Christopher Mark Gore\\
  \texttt{cgore.com}}
\date{Monday, June 8, {\smaller AD} 2015} % textsc doesn't seem to work for Baskerville.

\begin{document}

\raggedslides[0mm]


\begin{slide}
  \color{\hc}

  \begin{center}
    \includegraphics[height=1.25in]{stlruby.eps}
  \end{center}

  \maketitle

  \color{Black}
\end{slide}


\begin{slide}
  \h{Everything is a Thing}

\begin{lstlisting}
12.class # Fixnum
"Hi there".class # String
2.71828.class # Float
[1, 2, 3].class # Array
{age: 36, name: "Chris"}.class # Hash
:foo.class # Symbol
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{We Can Insist on the ``Right'' Thing}

  We'll explain the difference between the concepts ``instance of,'' ``is a,''  and ``kind
  of'' in a few slides.

\begin{lstlisting}
if not k.class == Fixnum
  raise ILoveOnlyNumbers
end
if not m.instance_of? Fixnum
  raise ILoveOnlyNumbers
end
if not n.is_a? Fixnum
  raise ILoveOnlyNumbers
end
if not o.kind_of? Fixnum
  raise ILoveOnlyNumbers
end
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{We Can Do Different Things\\to Different Things}

\begin{lstlisting}
if n.class == Fixnum
  puts "Whole Numbers FTW!!!"
elsif n.class == Float
  puts "More Accuracy is MORE!!!"
else
  raise ILoveOnlyNumbers
end
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Even Classes are Things!}

  This is one of the more unique aspects of Ruby.
  In a lot of other object-oriented programming languages, classes are
  ``special'' somehow, and you can't treat them the same way as everything else.

\begin{lstlisting}
:foo.class # Symbol
:foo.class.class # Class
:foo.class.class.class # Class
\end{lstlisting}

  We'll see how that's actually really nice and useful in a bit.
\end{slide}


\begin{slide}
  \h{We Can Make Our Own Classes}

\begin{lstlisting}
class Cat
  def initialize color
    @color = color
    @lives = 9
  end
  def die
    @lives = @lives - 1
  end
  def alive?
    @lives >= 1
  end
  def eat_tuna
    puts "Purrr!"
  end
end
lucky = Cat.new "black"
lucky.alive? # true
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Classes Have Methods}

  And those methods let our class instances do things.

\begin{lstlisting}
class ATM
  def initialize amount
    @amount = amount
  end
  def deposit account, amount
    @amount = @amount + amount
    account.deposit amount
  end
  def withdraw accout, amount
    raise GoAwayPeasant if amount > account.amount
    raise RunOnTheBank if amount > @amount
    account.withdraw amount
    @amount = @amount - amount
  end
end
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Instance Variables}

  Instance variables are written with an at-sign like \texttt{@foo}, and are
  per-instance.

\begin{lstlisting}
class Person
  attr_reader :age, name
  def initialize(age, name)
    @age = age
    @name = name
  end
end
john = Person.new 12, "John Jacobson"
fred = Person.new 44, "Fred Fellows"
john.age # 12
fred.age # 44
john == fred # false
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Getters and Setters}

\begin{lstlisting}
class Car
  attr_accessor :color
  attr_reader :mileage
  def initialize(color, mileage)
    @color, @mileage = color, mileage
  end
  def drive miles
    @mileage = @mileage + miles
  end
end
c = Car.new 4, :blue
c.drive 92_000
c.mileage # 92004
c.color = :green
c.mileage = 123 # NoMethodError: undefined method `mileage='
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Class Variables}

  Class variables are written with two at-signs like \texttt{@@foo}, and are
  per-class.  They are almost never what you actually want.

\begin{lstlisting}
class People
  @@population = 0
  attr_reader :name, :age
  def initialize(name, age)
    @@population = @@population + 1
    @alive = true
    @name, @age = name, age
  end
  def die
    @alive = false
    @@population = @@population - 1
  end
end
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Class Methods}

\begin{lstlisting}
class Person
  attr_reader :name, :born, :died
  def initialize(name, born, died)
    @name, @born, @died = name, born, died
  end
  class << self
    def from_s s # String like "John Doe (1912 - 1990)"
      name, born, died = s.scan(/(.*)\((\d+) - (\d+)\)/)[0]
      Person.new name, born.to_i, died.to_i
    end
  end
end
george = Person.from_s "George Washington (1732 - 1739)"
ben = Person.from_s "Benjamin Franklin (1706 - 1790)"
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Inheritance}

\begin{tikzpicture}
  \node[draw, fill=white] (Pet) at (0,2) {Pet};
  \node[draw, fill=white] (Cat) at (-1,1) {Cat};
  \node[draw, fill=white] (Dog) at (1,1) {Dog};
  \node[draw, fill=white] (Lab) at (1,0) {Lab};
  \draw[-open triangle 60, thick] (Cat) to (Pet);
  \draw[-open triangle 60, thick] (Dog) to (Pet);
  \draw[-open triangle 60, thick] (Lab) to (Dog);
\end{tikzpicture}

\begin{lstlisting}
class Pet
end
class Cat < Pet
end
class Dog < Pet
end
class Lab < Dog
end
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{``Kind Of'' versus ``Instance Of''}
\end{slide}


\begin{slide}
  \h{Class Instance Variables}

\begin{lstlisting}
class Foo
  @bar = 0
  attr_accessor :bar
  def initialize(bar)
    @bar = bar
  end
  class << self
    
  end
end
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Mixins}
\end{slide}


\begin{slide}
  \SlideSection{Questions?}
\end{slide}
\end{document}
